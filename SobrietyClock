#!/usr/bin/python
from datetime import datetime, timedelta
import os, shutil, sys

#############
# Functions #
#############

def timeBetween(t1, t2):

    # Get the difference between the two dates in seconds.
    t1 = datetime.strptime(t1, "%Y-%m-%d %H:%M:%S")
    t2 = datetime.strptime(t2, "%Y-%m-%d %H:%M:%S")
    timeInSeconds = abs(int((t1-t2).total_seconds()))

    # Convert the seconds to "{days} days, {hours}:{minutes}:{seconds}".
    timechange = str(timedelta(seconds = timeInSeconds))

    # Convert the timestamp into "{years} years, {months} months, {weeks} weeks, {days} days, {hours}:{minutes}:{seconds}".
    if len(timechange) > 8:
        days = int(timechange.split()[0])
        years = divmod(days, 365)
        months = divmod(years[1], 30)
        weeks = divmod(months[1], 7)
        days = weeks[1]
        hms = timechange.split()[2]
        timestamp = str(f"{years[0]} years, {months[0]} months, {weeks[0]} weeks, {days} days, {hms}")
    else:
        return timechange

    # Make "0 {unit}" entries not appear.
    for unit in ["years", "months", "weeks", "days"]:
        timestamp = timestamp.replace(f"0 {unit}, ", "")
    return timestamp
    
def resetClock(issue, time):

    # Set the default value if no time was specified.
    if time == "":
        time=str(datetime.now()).split(".")[0]

    # Write the specified or default time to assets/clocks/{issue}.
    file = open(f"assets/clocks/{issue}", "w")
    file.write(time)
    print(f"Wrote {time} for clock {issue}.")

def domore():

    # Ask the user if they would like to do anything else: Restart the code if they do, exit if they don't.
    rerun = input("Would you like to do anything else? (y/N) ")
    if rerun.lower() == "y":
        restart()
    else:
        return False

def restart():

    # I don't really know how this works but it does so you know
    os.execv(sys.executable, ['python'] + sys.argv)

#############
# Main Loop #
#############

def start():

    # Take the user's choice of action and store in memory.
    action = input("Are you [r]esetting (or adding)/[d]eleting a clock or just [c]hecking progress? ")
    actions = ["r", "d", "c"]
    if action not in actions:
        print("Invalid option. (not r/d/c)")
        start()
        
    # Initialise and list clocks.
    clocks = os.listdir("assets/clocks")
    clockNumbers = {}
    print("Available clocks:")
    n = 0
    for clock in clocks:
        n += 1
        print(f"[{n}] {clock}")
        clockNumbers[n] = clock
        
##########################
# Resetting/Adding Clock #
##########################

    if action == "r":

        # Initialise a dummy clock to add the option to create a "New" clock.
        n += 1
        print(f"[{n}] New")
        clockNumbers[n] = "New"

        # Let the user choose a clock.
        while True:
            choice = input("Choose a clock: ")
            #try:
            if 1==1:
                if int(choice) not in clockNumbers:
                    print("That is not an option!")
                else:
                    print(f"Selected clock {choice}: {clockNumbers[int(choice)]}.")

                    # If the user creates a new clock, go through the clock creation process.
                    if clockNumbers[int(choice)] == "New":
                        def nameClock():
                            clockName = input("Enter a name for the new clock: ")
                            try:
                                file = open(f"assets/clocks/{clockName}", "x")
                            except:
                                print("A clock with that name already exists! Please choose another name.")
                                nameClock()
                            print(f"Clock with name {clockName} created.")
                            file.close()
                            return clockName
                        clockName = nameClock()
                        
                    # If the user uses an existing clock, set the name of that clock to the same variable.
                    else:
                        clockName = clockNumbers[(int(choice))]

                    # Have the user set a time for the clock to be set to.
                    clockTime = input("What time do you want to reset this clock to? (default: now, format: YYYY-MM-DD HH:MM:SS) ")
                    if clockNumbers[int(choice)] != "New":
                        file = open(f"assets/clocks/{clockNumbers[int(choice)]}", "r")
                        lastReset = file.read()
                        file.close()
                        print(f"You last reset the clock {clockNumbers[int(choice)]} on {lastReset.split()[0]} at {lastReset.split()[1]}.")
                        print(f"You did not reset the clock for {timeBetween(str(datetime.now()).split('.')[0], lastReset)}.")   
                    resetClock(clockName, clockTime)
                    if domore() == False:
                        return
                        
            # Prevent crashing in case the user does not select a number.            
            #except ValueError:
                #print("That is not an option! Please make sure you choose a number.")

        if domore() == False:
            return

#################
# Viewing Clock #
#################

    elif action == "c":

        # Let the user choose a clock.        
        while True:
            choice = input("Choose a clock: ")
            try:
                if int(choice) not in clockNumbers:
                    print("That is not an option!")

                # Return information based on the contents of the clock's file.
                else:
                    file = open(f"assets/clocks/{clockNumbers[int(choice)]}", "r")
                    lastReset = file.read()
                    file.close()
                    print(f"You last reset the clock {clockNumbers[int(choice)]} on {lastReset.split()[0]} at {lastReset.split()[1]}.")
                    print(f"You have not reset the clock for {timeBetween(str(datetime.now()).split('.')[0], lastReset)}.")

                    if domore() == False:
                        return

            # Prevent crashing in case the user does not select a number.
            except ValueError: 
                print("That is not an option! Please make sure you choose a number.")

##################
# Deleting Clock #
##################

    elif action == "d":   

        # Let the user choose a clock.     
        while True:
            choice = input("Choose a clock: ")
            try:
                if int(choice) not in clockNumbers:
                    print("That is not an option!")

                # If the specified clock exists (it always should) then delete the clock.
                elif os.path.exists(f"assets/clocks/{clockNumbers[int(choice)]}"):
                    os.remove(f"assets/clocks/{clockNumbers[int(choice)]}")
                    print(f"Removed clock {clockNumbers[int(choice)]}.")

                if domore() == False:
                    return

            # Prevent crashing in case the user does not select a number.   
            except ValueError: 
                print("That is not an option! Please make sure you choose a number.")

##############
# Start code #
##############

#try:
#
#    # Create required directories if they do not exist.
#    if not os.path.exists("assets/clocks"):
#        os.makedirs("assets/clocks", exist_ok=True)
#
#    # Run the rest of the file.
#    start()
#except: 
#    # "Be fucking quiet."
#    pass

start()
